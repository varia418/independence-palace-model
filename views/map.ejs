<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />

    <title>Dinh Độc Lập</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <style>
        html,
        body,
        #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }

        /* Style mô hình Dinh Độc Lập */
        #back {
            position: absolute;
            bottom: 20px;
        }

        #back i {
            background-image: url(app/public/img/back.svg);
            background-repeat: no-repeat;
            display: inline-block;
            width: 100px;
            height: 25px;
            padding-left: 25px;
            padding-top: 2px;
            margin: 10px;
            cursor: pointer;
            background-size: 20px;
        }
    </style>
    <link rel="stylesheet" href="https://js.arcgis.com/4.28/esri/themes/light/main.css" />
    <script src="https://js.arcgis.com/4.28/"></script>

    <script type='text/javascript'>
        // Khai báo biến click copy lấy tọa độ
        var map;
        var list_points = [];
        var string_points = '';

        // hàm click lấy copy tọa độ
        function copyTextToClipboard(text) {
            if (!navigator.clipboard) {
                fallbackCopyTextToClipboard(text);
                return;
            }
            navigator.clipboard.writeText(text).then(
                function () {
                    console.log('Async: Copying to clipboard was successful!');
                },
                function (err) {
                    console.error('Async: Could not copy text: ', err);
                }
            );
        }
        require([
            'esri/Map',
            'esri/views/SceneView',
            'esri/layers/GeoJSONLayer',
            'esri/layers/SceneLayer',
            'esri/layers/GraphicsLayer',
            'esri/Graphic',
            'esri/request',
            'esri/geometry/Point',
            'esri/geometry/Mesh',
            'esri/geometry/support/MeshTexture',
            'esri/geometry/SpatialReference',
            'esri/rest/geometryService',
            'esri/rest/support/DistanceParameters',
            'esri/geometry/support/meshUtils',
        ], function (
            Map,
            SceneView,
            GeoJSONLayer,
            SceneLayer,
            GraphicsLayer,
            Graphic,
            esriRequest,
            Point,
            Mesh,
            MeshTexture,
            SpatialReference,
            geometryService,
            DistanceParameters,
            meshUtils
        ) {
            const data = JSON.parse(JSON.stringify(<%- data %>));
            console.log(data);
            const a = 86.19609697819396;
            const b = 35.777078869019;
            const c = 29.373043461846656;
            const d = 14.893092119035835;
            const e = 5.362867866395603;
            const f = 13.196519450343406;
            const g = 4.669535492104023;
            const h = 19.326979335433652;
            const i = 21.470659471369636;
            const j = 4.662351792212651;
            const k = 31.106531103747145;
            const l = 32.64048964664293;
            const m = 10.77580050922984;
            const n = 10.94537832397216;
            const o = 15.35567862550349;

            const map = new Map({
                basemap: 'topo-vector',
                ground: 'world-elevation',
                layers: [],
            });

            const view = new SceneView({
                container: 'viewDiv',
                map: map,
                camera: {
                    position: [106.696851, 10.783157, 400],
                    heading: 910,
                    tilt: 60,
                },
                zoom: 100,
            });

            const DDL_location = new Point({
                x: 106.69546012873347,
                y: 10.777092119827023,
                z: 15
            });

            function movePoint(pt, distance, angle) {
                //rayon of the earth
                const R = 6371e3;
                // latitude in rad
                let lat1 = (pt.latitude * Math.PI) / 180;
                // longitude in rad
                let long1 = (pt.longitude * Math.PI) / 180;
                // the angle between the 2 points in rad
                angle = ((90 - angle) * Math.PI) / 180;
                const sigma = distance / R;
                const delLat = sigma * Math.cos(angle);
                //latitude of the destination point
                let lat2 = ((lat1 + delLat) * 180) / Math.PI;
                const del = Math.log(Math.tan(lat2 / 2 + Math.PI / 4) / Math.tan(lat1 / 2 + Math.PI / 4));
                const q = Math.cos(lat1);

                const delLong = (sigma * Math.sin(angle)) / q;
                //longitude of the destination point
                let long2 = ((long1 + delLong) * 180) / Math.PI;

                return new Point({
                    x: long2,
                    y: lat2,
                    z: pt.z
                });
            }

            //Hiển thị thông tin chi tiết của Dinh Độc Lập
            view.popup.defaultPopupTemplateEnabled = true;

            fetch('./data/tree_corr.json')
                .then((response) => response.json())
                .then((json) => {
                    for (var corr in json) {
                        const tree_loc = new Point({
                            x: json[corr][0],
                            y: json[corr][1],
                            z: 15,
                        });

                        Mesh.createFromGLTF(tree_loc, './Model/Tree/Tree.glb') //Thêm tượng demo
                            .then(function (geometry) {
                                // increase it a factor of 3
                                geometry.scale(5, {
                                    origin: tree_loc
                                });
                                // rotate it by 90 degrees around the z axis
                                geometry.rotate(0, 0, 114);
                                // add it to a graphic
                                const graphic = new Graphic({
                                    geometry,
                                    symbol: {
                                        type: 'mesh-3d', // autocasts as new MeshSymbol3D()
                                        symbolLayers: [{
                                            type: 'fill', // autocasts as new FillSymbol3DLayer()
                                            material: {
                                                //color: "gray"
                                            },
                                            size: 1000,
                                        },],
                                    },
                                });

                                view.graphics.add(graphic);
                            })
                            .catch(console.error);
                    }
                });

            const fountain_loc = new Point({
                x: 106.69596145527656,
                y: 10.777612314732947,
                z: 16,
            });

            Mesh.createFromGLTF(fountain_loc, './Model/Fountain/Fountain.gltf') //Thêm tượng demo
                .then(function (geometry) {
                    // increase it a factor of 3
                    geometry.scale(0.5, {
                        origin: fountain_loc
                    });
                    // rotate it by 90 degrees around the z axis
                    geometry.rotate(0, 0, 114);
                    // add it to a graphic
                    const graphic = new Graphic({
                        geometry,
                        symbol: {
                            type: 'mesh-3d', // autocasts as new MeshSymbol3D()
                            symbolLayers: [{
                                type: 'fill', // autocasts as new FillSymbol3DLayer()
                                material: {
                                    //color: "gray"
                                },
                                size: 1000,
                            },],
                        },
                    });

                    view.graphics.add(graphic);
                })
                .catch(console.error);


            data.forEach(component => {
                const boxes = [];
                const cylinders = [];
                const spheres = [];
                const planes = [];

                if (component.boxes.length > 0) {
                    component.boxes.forEach(box => {
                        const location = new Point(box.location.x, box.location.y, box.location.z);
                        const geometry = Mesh.createBox(location, {
                            size: {
                                width: box.size.width,
                                height: box.size.height,
                                depth: box.size.depth,
                            },
                            material: {
                                color: box?.color ?? '#fff',
                            }
                        });

                        if (box.rotate) {
                            geometry.rotate(box.rotate.x, box.rotate.y, box.rotate.z);
                        }

                        if (box.offset) {
                            geometry.offset(box.offset.x, box.offset.y, box.offset.z);
                        }

                        boxes.push(geometry);
                    });
                }
                if (component.cylinders.length > 0) {
                    component.cylinders.forEach(cylinder => {
                        const location = new Point(cylinder.location.x, cylinder.location.y, cylinder.location.z);
                        const geometry = Mesh.createCylinder(location, {
                            size: {
                                width: cylinder.size.width,
                                height: cylinder.size.height,
                                depth: cylinder.size.depth,
                            },
                            material: {
                                color: cylinder?.color ?? '#fff',
                            }
                        });

                        if (cylinder.rotate) {
                            geometry.rotate(cylinder.rotate.x, cylinder.rotate.y, cylinder.rotate.z);
                        }

                        if (cylinder.offset) {
                            geometry.offset(cylinder.offset.x, cylinder.offset.y, cylinder.offset.z);
                        }

                        cylinders.push(geometry);
                    });
                }
                if (component.spheres.length > 0) {
                    component.spheres.forEach(sphere => {
                        const location = new Point(sphere.location.x, sphere.location.y, sphere.location.z);
                        const geometry = Mesh.createSphere(location, {
                            size: {
                                width: sphere.size.width,
                                height: sphere.size.height,
                                depth: sphere.size.depth,
                            },
                            material: {
                                color: sphere?.color ?? '#fff',
                            }
                        });

                        if (sphere.rotate) {
                            geometry.rotate(sphere.rotate.x, sphere.rotate.y, sphere.rotate.z);
                        }

                        if (sphere.offset) {
                            geometry.offset(sphere.offset.x, sphere.offset.y, sphere.offset.z);
                        }

                        spheres.push(geometry);
                    });
                }
                if (component.planes.length > 0) {
                    component.planes.forEach(plane => {
                        const location = new Point(plane.location.x, plane.location.y, plane.location.z);
                        const geometry = Mesh.createPlane(location, {
                            size: {
                                width: plane.size.width,
                                height: plane.size.height,
                                depth: plane.size.depth,
                            },
                            material: {
                                color: plane?.color ?? '#fff',
                            }
                        });

                        if (plane.rotate) {
                            geometry.rotate(plane.rotate.x, plane.rotate.y, plane.rotate.z);
                        }

                        if (plane.offset) {
                            geometry.offset(plane.offset.x, plane.offset.y, plane.offset.z);
                        }

                        planes.push(geometry);
                    });
                }

                const componentGeometry = meshUtils.merge([].concat(boxes, cylinders, spheres, planes));

                if (component.rotate) {
                    componentGeometry.rotate(component.rotate.x, component.rotate.y, component.rotate.z);
                }

                if (component.offset) {
                    componentGeometry.offset(component.offset.x, component.offset.y, component.offset.z);
                }

                const componentGraphic = new Graphic({
                    geometry: componentGeometry,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{
                            type: 'fill'
                        }],
                    },
                });

                view.graphics.add(componentGraphic);
            });

            // window color: #7daebd
            function createPreviewBlock() {
                const boxLocation1 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 20,
                });
                const sphereLocation1 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 20,
                });
                const cylinderLocation1 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 20.4,
                });
                const sphereLocation2 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 20.75,
                });
                const cylinderLocation2 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 21.15,
                });
                const sphereLocation3 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 21.5,
                });
                const cylinderLocation3 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 21.9,
                });
                const sphereLocation4 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 22.25,
                });
                const boxLocation2 = new Point({
                    x: 106.69596145527656,
                    y: 10.777612314732947,
                    z: 22.5,
                });
                
                const sphere1 = Mesh.createSphere(sphereLocation1, {
                    size: {
                        width: 0.4,
                        height: 0.5,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const sphere2 = Mesh.createSphere(sphereLocation2, {
                    size: {
                        width: 0.4,
                        height: 0.5,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const sphere3 = Mesh.createSphere(sphereLocation3, {
                    size: {
                        width: 0.4,
                        height: 0.5,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const sphere4 = Mesh.createSphere(sphereLocation4, {
                    size: {
                        width: 0.4,
                        height: 0.5,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const cylinder1 = Mesh.createCylinder(cylinderLocation1, {
                    size: {
                        width: 0.2,
                        height: 0.45,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const cylinder2 = Mesh.createCylinder(cylinderLocation2, {
                    size: {
                        width: 0.2,
                        height: 0.45,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const cylinder3 = Mesh.createCylinder(cylinderLocation3, {
                    size: {
                        width: 0.2,
                        height: 0.45,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const box1 = Mesh.createBox(boxLocation1, {
                    size: {
                        width: 5,
                        height: 0.25,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });
                const box2 = Mesh.createBox(boxLocation2, {
                    size: {
                        width: 5,
                        height: 0.25,
                        depth: 0.1,
                    },
                    material: {
                        color: '#fff',
                    }
                });


                let graphic1 = new Graphic({
                    geometry: sphere1,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic2 = new Graphic({
                    geometry: cylinder1,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic3 = new Graphic({
                    geometry: sphere2,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic4 = new Graphic({
                    geometry: cylinder2,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic5 = new Graphic({
                    geometry: sphere3,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic6 = new Graphic({
                    geometry: cylinder3,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic7 = new Graphic({
                    geometry: sphere4,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic8 = new Graphic({
                    geometry: box1,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                let graphic9 = new Graphic({
                    geometry: box2,
                    symbol: {
                        type: 'mesh-3d',
                        symbolLayers: [{ type: 'fill' }],
                    },
                });
                view.graphics.addMany([graphic1, graphic2, graphic3, graphic4, graphic5, graphic6, graphic7, graphic8, graphic9]);
            }
            createPreviewBlock();


            //Click copy tọa độ
            view.on('click', function (event) {
                view.hitTest(event).then(function (hitTestResults) {
                    if (hitTestResults.results) {
                        list_points.push([event.mapPoint.longitude, event.mapPoint.latitude]);
                        string_points = '[' + event.mapPoint.longitude + ', ' + event.mapPoint.latitude + ']';
                        copyTextToClipboard(string_points);
                    }
                });
            });
        });
    </script>
</head>

<body>
    <div id="viewDiv"></div>
</body>

</html>